{-
Computes the factorial of the number stored in x and leaves the result in output:
-}


--x := 1;
--y := 0;

--z := x + y;

--z := y and 1 and x or y * x;

{-
     If I see a "true" change to an int "1"
                 "false" change to  "0"

     Left operator should be able to be an int as well for arithmetic operations

     Loops can contain an integer
     Loop1:
     Loop2:
-}
--y := x;
--z := 1;
--y := y - 1;

{-
while y > 1 do
    while y > 1 do
z := z * y;
y := y - 1
od;
y := 0;
output := z
-}


{-
LABEL: add r0, r8
        ...
        ...
        bneq r0, r2, LABEL
-}
 {-
n := input;                         --1
steps := 0;                         --2
while n > 1 do                      --3
rem := n; --Here we divide n by 2:  --4
quot := 0;                          --5
while rem > 1 do                    --6
rem := rem - 2;                     --7
quot := quot + 1                    --8
od;
if rem = 0 then                     --9
n := quot                           --10
else
n := 3*n+1                          --11
fi;
steps := steps + 1                  --12
od;
output := steps                     --13
-}

{-
output := 0
b := 1
z := 0
while n > z do
t := output + b;
output := b
b := t
n := n-1;
l := 7
z := 0
od;
-}

{-n := input;
steps := 0;
while n > 1 do
rem := n; --Here we divide n by 2:
od-}

{-
x := input
if x > 0 then
x := 10;
y := 3;
z := x + y;
a := 5 * z;
b := 33;
y := x + 4 + y * z * a - b
else
x := 2 ;
y := 2 * x;
fi
output := x
-}

{-
x := 10;
y := x + 10;
z := y + 10;
j := (3 + 4) * ( 9 + 7 );
output := j
-}

{- long while loop to make better benchmarking
    bigNum = 0
    y = 1
    constantFold = 1
    output = 1
-}
{-
bigNum := 999999999;
y := 1;
while bigNum > 0 do
bigNum := bigNum - 1;
constantFold := bigNum + 9 + 7 * y

od;

output := constantFold
-}

{- testing for boolean operations

-}

{- Testing everything in this file for benchmarking
    {- nested comment
    -}
    expected final states:
    x = 0
    steps = 0
    output = 0
    y = 2
    temp = true
    z = 1
    notTesting = 0
    factorialOutpu = 3628800
    tempz = 3628800
    tempy = 0
-}

{-
x := 0;
steps := 10;
--nested while loop
while steps > 0 do
    while steps > 2 do
        y := (steps - 2) + ((2 - 1) * (3 + 1))
    od;
    steps := steps - 1


od;


temp := 0;
if y = 2 then
    temp := 1
else
    skip
fi;

z := temp + 1 * x - 1 ; --z = 1




--factorial of 10
tempy := 10;
tempz := 1;
while tempy > 1 do
tempz := tempz * tempy;
tempy := tempy - 1
od;
tempy := 0;
output := tempz
-}


x := true;
y := false;

output := x and y