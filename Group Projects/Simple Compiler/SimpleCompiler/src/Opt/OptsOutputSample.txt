=================== Conditioned CFG: ===================
Predecessors:   Label:   Statement:          Successors:
     Start ->       1:   output := 0         -> 2
         1 ->       2:   b := 1              -> 3
         2 ->       3:   z := 0              -> 4
     3, 10 ->       4:   n w> z              -> 5, End
         4 ->       5:   t := (output + b)   -> 6
         5 ->       6:   output := b         -> 7
         6 ->       7:   b := t              -> 8
         7 ->       8:   n := (n - 1)        -> 9
         8 ->       9:   l := 7              -> 10
         9 ->      10:   z := 0              -> 4

=============== Reaching Definition Equations ===============
Labels    = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ? }
Variables = { output, b, z, n, t, l }

     RD_in(1) = { (1, ?), (2, ?), (3, ?), (4, ?), (5, ?), (6, ?) }
     RD_in(2) = RD_out(1)
     RD_in(3) = RD_out(2)
     RD_in(4) = RD_out(3) U RD_out(10)
     RD_in(5) = RD_out(4)
     RD_in(6) = RD_out(5)
     RD_in(7) = RD_out(6)
     RD_in(8) = RD_out(7)
     RD_in(9) = RD_out(8)
    RD_in(10) = RD_out(9)

    RD_out(1) = RD_in(1) \ { (output, L) | L is an element of Labels } U { (output, 1) }
    RD_out(2) = RD_in(2) \ { (b, L) | L is an element of Labels } U { (b, 2) }
    RD_out(3) = RD_in(3) \ { (z, L) | L is an element of Labels } U { (z, 3) }
    RD_out(4) = RD_in(4)
    RD_out(5) = RD_in(5) \ { (t, L) | L is an element of Labels } U { (t, 5) }
    RD_out(6) = RD_in(6) \ { (output, L) | L is an element of Labels } U { (output, 6) }
    RD_out(7) = RD_in(7) \ { (b, L) | L is an element of Labels } U { (b, 7) }
    RD_out(8) = RD_in(8) \ { (n, L) | L is an element of Labels } U { (n, 8) }
    RD_out(9) = RD_in(9) \ { (l, L) | L is an element of Labels } U { (l, 9) }
  RD_out(10) = RD_in(10) \ { (z, L) | L is an element of Labels } U { (z, 10) }

=============== Reaching Definition Sets ===============
RD_in(  1):   { (b, ?) (l, ?) (n, ?) (output, ?) (t, ?) (z, ?)  }
RD_in(  2):   { (b, ?) (l, ?) (n, ?) (output, 1) (t, ?) (z, ?)  }
RD_in(  3):   { (b, 2) (l, ?) (n, ?) (output, 1) (t, ?) (z, ?)  }
RD_in(  4):   { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 1) (output, 6) (t, ?) (t, 5) (z, 3) (z, 10)  }
RD_in(  5):   { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 1) (output, 6) (t, ?) (t, 5) (z, 3) (z, 10)  }
RD_in(  6):   { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 1) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_in(  7):   { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_in(  8):   { (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_in(  9):   { (b, 7) (l, ?) (l, 9) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_in( 10):   { (b, 7) (l, 9) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }

RD_out(  1):  { (b, ?) (l, ?) (n, ?) (output, 1) (t, ?) (z, ?)  }
RD_out(  2):  { (b, 2) (l, ?) (n, ?) (output, 1) (t, ?) (z, ?)  }
RD_out(  3):  { (b, 2) (l, ?) (n, ?) (output, 1) (t, ?) (z, 3)  }
RD_out(  4):  { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 1) (output, 6) (t, ?) (t, 5) (z, 3) (z, 10)  }
RD_out(  5):  { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 1) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_out(  6):  { (b, 2) (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_out(  7):  { (b, 7) (l, ?) (l, 9) (n, ?) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_out(  8):  { (b, 7) (l, ?) (l, 9) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_out(  9):  { (b, 7) (l, 9) (n, 8) (output, 6) (t, 5) (z, 3) (z, 10)  }
RD_out( 10):  { (b, 7) (l, 9) (n, 8) (output, 6) (t, 5) (z, 10)  }

================ After Constant Folding: ================
Predecessors:   Label:   Statement:          Successors:
     Start ->       1:   output := 0         -> 2
         1 ->       2:   b := 1              -> 3
         2 ->       3:   z := 0              -> 4
     3, 10 ->       4:   n w> z              -> 5, End
         4 ->       5:   t := (output + b)   -> 6
         5 ->       6:   output := b         -> 7
         6 ->       7:   b := t              -> 8
         7 ->       8:   n := (n - 1)        -> 9
         8 ->       9:   l := 7              -> 10
         9 ->      10:   z := 0              -> 4


============================================================= Liveness Analysis =============================================================
i:   succ[i]:    gen[i]:         kill[i]:     in[i] equation:                    out[i] equation:   in[i] result:         out[i] result:
1    { 2 }       {  }            { output }   gen[1] U ( out[1] \ kill[1] )      in[2]              { n }                 { n, output }
2    { 3 }       {  }            { b }        gen[2] U ( out[2] \ kill[2] )      in[3]              { n, output }         { n, b, output }
3    { 4 }       {  }            { z }        gen[3] U ( out[3] \ kill[3] )      in[4]              { n, b, output }      { z, n, b, output }
4    { 5, 11 }   { z, n }        {  }         gen[4] U ( out[4] \ kill[4] )      in[5] U in[11]     { z, n, b, output }   { b, output, n }
5    { 6 }       { b, output }   { t }        gen[5] U ( out[5] \ kill[5] )      in[6]              { b, output, n }      { b, t, n }
6    { 7 }       { b }           { output }   gen[6] U ( out[6] \ kill[6] )      in[7]              { b, t, n }           { t, n, output }
7    { 8 }       { t }           { b }        gen[7] U ( out[7] \ kill[7] )      in[8]              { t, n, output }      { n, b, output }
8    { 9 }       { n }           { n }        gen[8] U ( out[8] \ kill[8] )      in[9]              { n, b, output }      { n, b, output }
9    { 10 }      {  }            { l }        gen[9] U ( out[9] \ kill[9] )      in[10]             { n, b, output }      { n, b, output }
10   { 4 }       {  }            { z }        gen[10] U ( out[10] \ kill[10] )   in[4]              { n, b, output }      { z, n, b, output }
11   {  }        { output }      {  }         gen[11] U ( out[11] \ kill[11] )   { }                { output }            {  }


============= After Dead Code Elimination: =============
Predecessors:   Label:   Statement:          Successors:
     Start ->       1:   output := 0         -> 2
         1 ->       2:   b := 1              -> 3
         2 ->       3:   z := 0              -> 4
      3, 9 ->       4:   n w> z              -> 5, End
         4 ->       5:   t := (output + b)   -> 6
         5 ->       6:   output := b         -> 7
         6 ->       7:   b := t              -> 8
         7 ->       8:   n := (n - 1)        -> 9
         8 ->       9:   z := 0              -> 4